{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","respuesta","json","data","gifs","map","img","id","title","images","downsized_medium","console","log","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"2MAIaA,EAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAAmB,EAERC,mBAAS,IAFD,mBAErCC,EAFqC,KAEzBC,EAFyB,KAsB5C,OACI,sBAAMC,SAdW,SAACC,GAClBA,EAAEC,iBAECJ,EAAWK,OAAOC,OAAS,IAC1BR,GAAe,SAAAS,GAAI,OAAKP,GAAL,mBAAmBO,OAEtCN,EAAc,MAQlB,SACI,uBACIO,KAAK,OACLC,MAAQT,EACRU,SAvBc,SAACP,GAEvBF,EAAcE,EAAEQ,OAAOF,a,+BCVlBG,EAAO,uCAAG,WAAMC,GAAN,uBAAAC,EAAA,6DAEbC,EAFa,iDAEmCC,UAAUH,GAF7C,+DAIKI,MAAMF,GAJX,cAIbG,EAJa,gBAKEA,EAAUC,OALZ,uBAKZC,EALY,EAKZA,KAEDC,EAAOD,EAAKE,KAAK,SAAAC,GAAQ,IAAD,EAE1B,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAI1Ca,QAAQC,IAAIR,GAhBO,kBAkBZA,GAlBY,4CAAH,sDCEL,SAASS,EAAT,GAA0C,EAAnBN,GAAoB,IAAhBC,EAAe,EAAfA,MAAQV,EAAO,EAAPA,IAG9C,OACI,sBAAKgB,UAAU,6CAAf,cAEI,qBAAKC,IAAKjB,EAAKkB,IAAKR,IACpB,4BAAIA,OCJD,SAASS,EAAT,GAA8B,IAAZrB,EAAW,EAAXA,SAAW,ECFhB,SAACA,GAAc,IAAD,EAEZd,mBAAS,CAC/BqB,KAAM,GACNe,SAAS,IAJyB,mBAE/BC,EAF+B,KAExBC,EAFwB,KAuBtC,OAhBAC,qBAAW,WAEP1B,EAASC,GAAW0B,MAAM,SAAAC,GAEtBH,EAAS,CACLjB,KAAMoB,EACNL,SAAS,SAOlB,CAACtB,IAGGuB,EDPwBK,CAAa5B,GAArCsB,EAdiC,EAcjCA,QAAcT,EAdmB,EAcxBN,KAEhB,OACI,qCACI,oBAAIW,UAAY,6CAAhB,SAA8DlB,IAE7DsB,GAAW,2CAHhB,IAKI,qBAAKJ,UAAU,kBAAf,SAEQL,EAAOJ,KAAK,SAAAC,GACR,OACI,cAACO,EAAD,eAEQP,GADCA,EAAIC,YE5BzC,IA6BekB,EA7BM,WAAO,IAAD,EAEa3C,mBAAS,CAAC,eAFvB,mBAEhB4C,EAFgB,KAEJ7C,EAFI,KAYvB,OACI,qCACI,8CACA,cAAC,EAAD,CAAaA,cAAiBA,IAC9B,uBAEA,6BAEQ6C,EAAWrB,KAAK,SAAAT,GACZ,OAAO,cAACqB,EAAD,CAAwBrB,SAAYA,GAAtBA,YCpB7C+B,IAASC,OACL,cAAC,EAAD,IACFC,SAASC,eAAe,W","file":"static/js/main.d76329a0.chunk.js","sourcesContent":["//rafc snap para crear un nuevo componente\r\nimport React, { useState } from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nexport const AddCategory = ({setCategories}) => {\r\n\r\n    const [inputValue, setInputValue] = useState(\"\");\r\n\r\n    const handleInputChange = (e) => { //para que funcione el onChange y se puede modificar el texto del input\r\n        // console.log(e.target.value)\r\n        setInputValue(e.target.value)\r\n    }\r\n    //entonces el inputValue siempre contendrá el ultimo valor que puso el usuario\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault(); //Evita que el form por defecto haga que refresque la pagina PROVAR DAR ENTER A UN FORM SIN ESTO Y VERAS COMO SE REFRESCA LA PAGINA POR COMPLETO\r\n        \r\n        if(inputValue.trim().length > 0){\r\n            setCategories( cats => [inputValue,...cats] ); //como no tenemos acceso a la variable de ese useSatate que es el categories usamos el callback cats => y esa es la variable categories cuando no tenemos acceso a ella\r\n            //setCategories se la pasamos como props desde el componente padre hasta este componente hijo\r\n            setInputValue('');\r\n        } else{\r\n\r\n        }\r\n    }\r\n\r\n    //SIN EL ONCHANGE NO SIRVE\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <input\r\n                type=\"text\"\r\n                value={ inputValue }\r\n                onChange={ handleInputChange }\r\n            />\r\n        </form>\r\n            \r\n    )\r\n}\r\n\r\nAddCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired\r\n}\r\n","export const getGifs = async(category) => { //RETORNA UNA PROMESA\r\n    \r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=10&api_key=YmxZOJdxhdwHhzVvZmJxYrhIhjuAiLW4`; //postman y documentacion search endopoint\r\n    //encodeURI es una funcion de js para que si el usuario manda espacios cambiarlos por no se que para que se haga la peticion bien\r\n    const respuesta = await fetch(url); //promesa\r\n    const {data} = await respuesta.json(); //promesa obteniendo la informacion completa que solicitamos en la API\r\n\r\n    const gifs = data.map (img => { //PARA RECOLECTAR SOLAMENTE LA INFORMACION QUE NECESITAMOS DE CADA GIF DE LA API\r\n        //RETORNARA UN NUEVO OBJETO CON LAS SIGUIENTES TRES PROPIEDAD QUE SOLO NECESITAMOS\r\n        return {\r\n            id: img.id, //el id \r\n            title: img.title, //el titulo\r\n            url: img.images?.downsized_medium.url //el url del video o del gif\r\n        }\r\n    })\r\n\r\n    console.log(gifs); //imprimir los datos obtenidos en consola\r\n    \r\n    return gifs;\r\n}","import React from 'react'\r\n\r\nexport default function GifGridItem( {id, title , url} ) {\r\n    \r\n    // console.log(id, title, url)\r\n    return (\r\n        <div className=\"card animate__animated animate__backInDown\"> {/* Animate.css https://animate.style/  (libreria animaciones css) */}\r\n            {/* {img.title} */}\r\n            <img src={url} alt={title}/>\r\n            <p>{title}</p>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { useFetchGifs } from '../hooks/useFetchGifs'\r\n// import { getGifs } from '../helpers/getGifs';\r\nimport GifGridItem from './GifGridItem';\r\n\r\nexport default function GifGrid({category}) {\r\n\r\n    // const [images, setImages] = useState([])\r\n\r\n    //NUEVO HOOK useEffect SIRVE PARA EJECUTAR CIERTO CODIGO DE MANERA CONDICIONAL\r\n    //SI LLAMARAMOS EL getGifs() normal CADA QUE PRESIONE EL BOTON PARA CAMBIAR EL useState o ALGO PARECIDO REACT RENDERIZARA TODO EL COMPONENTE Y COMO EN ESTE COMPONENTE\r\n    //TENEMOS ESTA FUNCION PARA LA PETICION, CADA QUE HAGAMOS UN CAMBIO VOLVERA A HACER ESTA PETICION HTTP de getGifs Y FORMARA BUCLES INFINITOS\r\n\r\n    \r\n    // useEffect( () => {\r\n    //     getGifs(category).then(imgs => setImages(imgs)) //como es una funcion async retorna una promesa\r\n    // }, [category]) //entre llaves si la categoria cambia volvera a ejecutar lo que esta dentro del hook\r\n\r\n    // custom hook\r\n    const {loading, data:images} = useFetchGifs(category); //data:images => le asigna el valor de la variaable desestructurada data a la variable images \r\n\r\n    return (\r\n        <>\r\n            <h3 className = 'card animate__animated animate__backInDown'>{category}</h3>\r\n\r\n            {loading && <p>loading...</p>} {/*operador logico termario (if loading === true) */}\r\n\r\n            <div className=\"card-grid card \">\r\n                {\r\n                    images.map( img => {\r\n                        return(\r\n                            <GifGridItem \r\n                                key={img.id}              \r\n                                {...img}\r\n                            />\r\n                        )\r\n                    } )\r\n                }\r\n            \r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","import { useEffect, useState } from \"react\"\r\nimport {getGifs} from '../helpers/getGifs'\r\n\r\nexport const useFetchGifs = (category) => {\r\n   \r\n    const [state, setState] = useState({\r\n        data: [],\r\n        loading: true //antes de hacer la carga de imagenes\r\n    });\r\n\r\n    useEffect( () => {\r\n        \r\n        getGifs( category ).then( imgs => { //retorna el getGifs un objeto con los datos del gif\r\n\r\n            setState({\r\n                data: imgs,\r\n                loading: false //lo cambia a falso porque ya termino de cargar\r\n            });\r\n\r\n            \r\n            \r\n        } )\r\n\r\n    }, [category])\r\n\r\n\r\n    return state; {/*Retorna el objeto state */}\r\n\r\n}","import React, {useState} from 'react';\r\nimport {AddCategory} from './components/AddCategory'\r\nimport GifGrid from './components/GifGrid';\r\n\r\nconst GifExpertApp = () => {\r\n\r\n    const [categories, setCategories] = useState(['Naturaleza']);\r\n\r\n    // const handleAdd = (e) => {\r\n    //     setCategories( cats => [...categories, \"Naturaleza\"] ); //OPERADOR SPREAD para agregar un nuevo elemento al arreglo usando el useState,\r\n    //     //en este caso la categoría nueva que agregamos se posicionaria al final de el arreglo si lo quisieramos al principio sería [\"Naturaleza\",...categories]\r\n    //     //EL setCategories PUEDE TENER UN CALLBACK poniendo como primer argumento el ESTADO ANTERIOR (cats) y regresa el ESTADO NUEVO\r\n    // }\r\n\r\n\r\n    //COMUNICACION ENTRE COMPONENTES mandar la funcion del useState al otro componente AddCategory\r\n    return(\r\n        <>\r\n            <h2>GifExpertApp</h2>\r\n            <AddCategory setCategories = {setCategories}/> \r\n            <hr/>\r\n\r\n            <ol>\r\n                {\r\n                    categories.map( category => {\r\n                        return <GifGrid key={category} category = {category}/>\r\n                    } )\r\n                }\r\n            </ol>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default GifExpertApp;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport GifExpertApp from './GifExpertApp';\n\nReactDOM.render(\n    <GifExpertApp />,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}